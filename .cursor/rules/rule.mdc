---
description:
globs:
alwaysApply: true
---
# 项目规范汇总

本文档整合了项目所有开发规范的核心内容，旨在提供简洁明了的指导，确保代码质量和一致性。

## 项目说明

这是一个基于 nuxtjs  + vue + nuxt-icon 的 ssr 应用，在提供代码，在思考的时候你总是要基于当前项目的技术栈来思考。

## 核心规范

### 总是要遵守的规则

- 总是以中文回答问题
- 总是使用成熟的工具库（如`@vueuse/core`、`lodash`），避免重复造轮子
- 总是使用 `unocss classname + css variable` 实现UI组件和页面样式
- 总是使用封装后的 logger 进行日志打印，禁止直接调用 `console.<api>`
- 总是使用 `import.meta.client/server` 判断环境，禁用 `typeof window`
- 总是遵循目录结构和命名规范
- 总是在提供代码后执行 `pnpm lint` 检查并修复错误
- 总是删除未使用的代码和变量
- 总是使用 `v-bind + CSS变量` 实现动态样式，禁止内联样式
- 总是以 `<ui-{name}>` 方式使用UI组件
- 总是使用实际时间更新文件描述，禁止使用"当前"作为日期
- 总是在组件demo代码时提供示例代码
- 总是使用 scss 新语法 `@use 'style.scss';` 引入样式文件
- 总是充分利用 scss 的特性，避免添加重复无意义的样式
- 总是开发vue组件的时候要注意并解决水合问题
- 总是通过 ref 来获取元素对象，禁止使用 id + getElementById 方式(会导致水合问题)
- 总是在服务端通过 `import * as process from 'node:process'` 引入 process 对象
- 总是在设置 css 变量的时候给个备用控制 `null` 解决 `undefined` 会被当作正常的值而覆盖备用值

### 绝对禁止的行为

- 禁止在`components/ui/`目录下创建驼峰命名的文件（如`CamelCase.vue`）

- 禁止组件命名使用连字符（如`camel-case.vue`），正确格式：`camel/case.vue`

- 禁止使用 `style.setProperty`，必须使用 `v-bind + CSS变量`

- 禁止使用 `typeof window` 判断环境

- 禁止使用 `ts-ignore` 规避问题

- 禁止保留未使用的代码和变量

- 禁止直接使用 `localStorage/sessionStorage` API

- 禁止在单文件组件中混用 Options API 和 Composition API

- 禁止任何导致类型错误、语法错误的代码

- 禁止安装任何 @iconify 相关的图标包，项目中用的是 Nuxt 自带的 nuxt-icon，已经封装在 `<ui-icon/>` 组件了

- 禁止在创建目录或文件的时候复杂化，比如：菜单管理(错误示范：`menu-management`，正确示范：`menu`)

- 禁止使用原生的 confirm, alert,... 需要时使用 `useMessageBox`



## 文件组织规范

### 目录结构

Nuxt项目标准目录结构：

- **assets/** - 静态资源（SCSS、图片等）
- **components/** - Vue组件
  - **ui/** - 自定义UI组件目录
- **composables/** - 组合式函数
- **content/** - 基于文件的CMS内容
- **layouts/** - 布局组件
- **middleware/** - 路由中间件
- **pages/** - 页面组件
- **plugins/** - 插件
- **public/** - 静态文件
- **server/** - 服务器端代码
- **types/** - TypeScript类型定义
- **utils/** - 工具函数

### 命名规范

- **变量/函数**: camelCase（小驼峰）
- **类/接口**: PascalCase（大驼峰）
- **常量**: UPPER_SNAKE_CASE（大写下划线）
- **文件**: kebab-case（短横线），禁止出现 `parent/sub-parent` 文件或目录命名，正确示范：`parent/sub` 即可 
- **布尔变量**: 使用 `is`/`has`/`should` 前缀
- **组件文件**: 子目录形式，如 `button/index.vue`、`date/picker.vue`
- **事件名**：camelCase（小驼峰）

## Vue组件开发规范

### 基础规范

- 总是用 `h(...)` 方式来实现函数式组件，禁止使用 `jsx` 方式声明组件
- 禁止 vue 组件中显示的导入 `import ... from 'vue'` ，nuxtjs 有 vue 自动引入机制，可直接使用 vue 中的所有内容

### 基本结构

```vue
<script setup lang="ts" name="ComponentName">
/**
 * 组件描述
 * 创建日期: YYYY-MM-DD
 * 作者: [作者名称：通过 git config user.name 获取作者名称，如果没有默认使用 aiftt]
 * 邮箱：[作者邮箱：通过 git config user.email 获取作者邮箱，如果没有默认使用 ftt.loves@gmail.com]
 * 更新日期: YYYY-MM-DD - 更新内容
 */

// Props定义
const props = withDefaults(defineProps<{
  /**
   * 属性描述
   */
  propName?: string
}>(), {
  propName: 'default'
})

// 事件定义
const emit = defineEmits<{
  (e: 'change', value: string): void
  // 正确示例：合并同质化事件
  (e: 'eNameA' | 'eNameB' | ...): void
  // 错误示例：
  (e: 'eNameA'): void
  (e: 'eNameB'): void
}>()

// 其他逻辑...
</script>

<template>
  <!-- 组件模板 -->
</template>

<style lang="scss" scoped>
/* 组件样式 */
</style>
```

### Composition API规范

- 强制使用 `<script setup lang="ts">` 语法
- 简单数据类型使用 `ref()`，引用类型使用 `reactive()`
- 派生状态使用 `computed()`
- 组合式函数命名为 `useXxx`，放在 `composables/` 目录下

### Props和事件规范

- 总是使用 `defineProps<{...}>()` 定义props，并用 `withDefaults` 设置默认值
- 每个prop添加JSDoc注释说明用途
- 使用 `defineEmits<{...}>()` 定义事件
- Boolean类型props直接书写，错误示范：`<div :bool="true"/>`，正确示范：`<div bool/>`
- 总是使用 `defineModel()` 实现双向绑定

### 模板规范

- v-for必须使用key
- 避免模板中的复杂表达式，使用computed代替
- 合理处理null/undefined情况，使用可选链操作符

## UI组件规范

### 组件开发

- 总是开发组件对应的 demo 代码，并添加到 `pages/demo/components.vue` 页面，禁止单独新建页面
- 图标组件正确示范：`<ui-icon icon="carbon:close" />`，错误示范：`<ui-icon-some-name/>`

### 目录和命名

- UI组件放在 `components/ui/` 目录下
- 单个组件：`ui/button/index.vue`
- 组件族：`ui/typography/title.vue`
- 使用方式：`<ui-button>` 或 `<ui-typography-title>`

### 样式实现（v-bind + CSS变量）

```vue
<script setup>
// 定义props
const props = defineProps({
  color: String
})

// 计算属性，总是加上最后的 `[value] || null` 确保不会出现 --var-name: undefined; 情况
const colorVar = computed(() => props.color || null)
</script>

<style scoped>
.ui-component {
  --ui-component-color: v-bind(colorVar);
  color: var(--ui-component-color, var(--ui-color-default));
}
</style>
```

### 主题实现

- CSS变量在 `assets/scss/themes/` 下统一管理
- 支持亮色和暗色两套主题
- 组件使用主题变量，不硬编码颜色值

## TypeScript规范

- 禁止使用 `any` 类型，除非有充分理由
- 使用接口（interface）定义对象结构，以 `I` 开头
- 为函数添加返回类型
- 使用 `type` 关键字导入类型

```typescript
import type { IUser } from '~/types';

interface IResponse {
  data: IUser[];
  total: number;
}

async function fetchUsers(): Promise<IResponse> {
  // 实现...
}
```

## Nuxt特有规范

### 路由和页面

- `definePageMeta` 必须在script标签内，import语句之后
- 使用目录结构自动路由，动态路由使用 `[id].vue` 语法
- 总是使用message返回接口信息，而不是 `statusMessage`。 `statusMessage` 已经废弃了。

### 数据获取

- 使用 `useFetch` 和 `useAsyncData` 获取数据
- 通过 `watch` 监听路由参数变化刷新数据

```typescript
const route = useRoute();
const { data, refresh } = await useFetch(() => `/api/items/${route.params.id}`);

watch(() => route.params.id, () => refresh());
```

### 状态管理

- 简单状态用 `useState`，复杂状态用Pinia
- 避免使用全局变量存储状态

## 后端开发规范

### API设计

- 遵循RESTful原则
- 使用统一的响应格式
- API路径使用kebab-case

### Node.js规范

- 内置模块使用 `node:` 前缀导入
- 使用 async/await 处理异步操作
- 总是处理错误，实现优雅退出

```typescript
import * as fs from 'node:fs/promises';
import * as path from 'node:path';

async function readConfig() {
  try {
    const content = await fs.readFile(path.resolve('./config.json'), 'utf-8');
    return JSON.parse(content);
  } catch (error) {
    logger.error('读取配置失败', error);
    throw error;
  }
}
```

## 质量保证

- 使用ESLint进行静态代码分析
- 使用TypeScript进行类型检查
- 提交代码前执行 `pnpm lint` 和 `pnpm typecheck`
- 编写JSDoc风格的注释
- 遵循DRY、KISS、YAGNI原则
- 及时更新文档

## 最佳实践

- 组件拆分适当，保持单一职责
- 避免过深的组件嵌套
- 合理使用计算属性和监听器
- 适当的错误处理和边界情况处理
- 使用 `v-if` 替代 `v-show` 处理条件渲染复杂组件
- 大型列表使用虚拟滚动
- 按需加载大型依赖

## Nuxt 3 最佳实践

### Auto Imports 使用规范
- 总是优先使用 Nuxt 自动导入的 API，避免手动导入 Vue 和 Nuxt 的核心功能
- 禁止在同一文件中混用自动导入和显式导入同一 API
- 使用 `~/` 别名引用项目根目录下的文件

### 组合式函数（Composables）开发规范
- 总是在文件名前添加 `use` 前缀，如 `useCounter.ts`
- 导出的函数也必须以 `use` 开头，保持命名一致性
- 组合式函数必须具备良好的类型定义和返回值类型
- 依赖注入的 key 统一在 `types/injectionKeys.ts` 中定义

```typescript
// composables/useCounter.ts
export function useCounter(initialValue = 0) {
  const count = ref(initialValue)

  function increment() {
    count.value++
  }

  return {
    count: readonly(count),
    increment
  }
}
```

## SSR 特有规范

### 水合处理
- 总是使用 `onBeforeMount` 或 `onMounted` 处理仅客户端代码
- 使用 `useHead` 管理页面元数据，不直接操作 document
- 使用 `<ClientOnly>` 组件包裹仅客户端渲染的内容
- 数据状态变更需处理好 SSR 和 CSR 差异，避免水合不匹配错误

### 环境检测
- 使用 `import.meta.client` 和 `import.meta.server` 代替 `process.client` 等旧 API
- 服务端独有代码应放在 `server/` 目录下
- 当需要条件性执行客户端代码时，使用以下模式：

```typescript
function safeClientOperation() {
  if (import.meta.client) {
    // 客户端操作
  }
}
```

## 性能优化规范

### 延迟加载
- 总是对大型组件和路由使用动态导入
- 合理使用 `<LazyNuxtImg>` 实现图片延迟加载
- 避免首屏加载不必要的大型依赖

```vue
<script setup>
// 动态导入组件示例
const HeavyComponent = defineAsyncComponent(() =>
  import('~/components/heavy-component.vue')
)
</script>
```

### 资源优化
- 总是为图片设置合适的尺寸和格式，避免尺寸过大
- 总是使用 `<NuxtImg>` 或 `<NuxtPicture>` 组件处理图片
- 图标优先使用 `<ui-icon>` 组件，不引入额外图标库
- 使用 `useAsyncData` 缓存数据请求结果

### 代码分割
- 总是为路由组件使用 `definePageMeta` 配置预加载策略
- 使用 `<Suspense>` 管理异步组件加载状态
- 按功能模块拆分和组织组件，避免过大的单文件组件

## Vue 3 进阶规范

### 组件通信
- 优先使用 props 和 emits 进行父子组件通信
- 对于深层组件通信，使用 `provide`/`inject` 代替全局状态
- 总是为 provide/inject 定义明确的类型和默认值
- 复杂状态管理使用 Pinia，避免滥用 provide/inject

```typescript
// 定义通用类型
// types/theme.ts
export interface IThemeContext {
  theme: Ref<string>
  toggleTheme: () => void
}

// 提供状态
// composables/useThemeProvider.ts
export function useThemeProvider() {
  const theme = ref('light')

  function toggleTheme() {
    theme.value = theme.value === 'light' ? 'dark' : 'light'
  }

  provide('theme', {
    theme: readonly(theme),
    toggleTheme
  })
}

// 使用状态
// components/ThemedButton.vue
const theme = inject<IThemeContext>('theme')
```

### 响应式进阶
- 总是使用 `shallowRef` 处理大型对象以提升性能
- 对于只读数据，使用 `readonly` 包装后再传递给子组件
- 使用 `effectScope` 管理相关副作用，确保及时清理
- 避免在模板中过度使用计算属性嵌套

## 可访问性规范

### 基础可访问性
- 总是为图片添加恰当的 `alt` 属性
- 总是为表单字段添加关联的 label
- 使用语义化 HTML 元素而非纯 div + class
- 保持适当的色彩对比度以符合 WCAG 标准
- 确保键盘可访问性，支持 Tab 导航和焦点状态

### ARIA 属性
- 总是为非标准交互元素添加适当的 aria 属性
- 使用 `aria-label` 为无文本内容的交互元素提供描述
- 对于动态内容区域，使用 `aria-live` 通知屏幕阅读器
- 组件开发时考虑可访问性状态反馈

```vue
<template>
  <button
    :aria-pressed="isActive"
    :aria-label="buttonLabel"
    @click="toggle"
  >
    <ui-icon icon="carbon:close" />
  </button>
</template>

<script setup>
const isActive = ref(false)
const buttonLabel = computed(() => isActive.value ? '关闭面板' : '打开面板')

function toggle() {
  isActive.value = !isActive.value
}
</script>
```

## 国际化规范

### 文本国际化
- 总是使用 `useI18n` 提供的 `t` 函数翻译文本内容
- 避免在模板和代码中硬编码文本字符串
- 翻译文件按功能模块组织，避免单个巨大的翻译文件
- 为所有用户可见文本提供翻译键

```vue
<template>
  <div>{{ t('welcome.title') }}</div>
</template>

<script setup>
const { t } = useI18n()
</script>
```

### 数据国际化
- 使用 `useNuxtApp().$i18n` 访问 i18n 实例配置当前语言环境
- 总是使用符合 i18n 规范的日期、数字格式化方法
- 考虑不同语言的文本长度差异设计 UI 布局
- 对于多语言路由，使用 `useLocalePath` 生成路径

## 状态管理规范

### Pinia 使用规范
- Store 定义文件统一放置在 `stores/` 目录下
- Store ID 必须与文件名保持一致
- 总是优先使用 `defineStore` 的选项式 API 定义 store
- 总是在 Store 中定义明确的状态重置方法

```typescript
// stores/counter.ts
export const useCounterStore = defineStore('counter', {
  state: () => ({
    count: 0
  }),
  getters: {
    doubleCount: (state) => state.count * 2
  },
  actions: {
    increment() {
      this.count++
    },
    reset() {
      this.$patch({ count: 0 })
    }
  }
})
```

### 持久化状态
- 总是使用 `useCookie` 管理需要在服务端和客户端共享的状态
- 封装 `useStorage` 组合式函数操作本地存储，不直接使用原生 API
- 敏感数据不存储在客户端存储中
- 考虑数据同步和过期策略

## 安全规范

### XSS 防护
- 总是使用 Vue 的安全绑定语法，避免使用 `v-html` 显示用户输入
- API 数据总是经过过滤和验证后再使用
- 对用户输入进行适当的转义处理

### CSRF 防护
- 总是为 POST/PUT/DELETE 请求添加 CSRF Token
- 遵循同源策略，谨慎处理跨域请求

### 敏感信息处理
- 禁止在前端硬编码 API 密钥和密码
- 使用环境变量或后端接口安全传递认证信息
- 总是使用 HTTPS 加密传输数据

## 测试规范

### 单元测试
- 总是为组合式函数编写单元测试
- 使用 Vitest 处理异步测试，匹配测试文件命名为 `*.test.ts`
- 编写测试代码时考虑测试隔离原则

### 组件测试
- 使用 Vue Test Utils 和 @testing-library/vue 测试组件
- 优先测试组件公共 API 而非实现细节
- 模拟外部依赖，如 API 请求和 store

```typescript
// 组件测试示例
import { mount } from '@vue/test-utils'
import MyComponent from './MyComponent.vue'

test('组件渲染正确的内容', () => {
  const wrapper = mount(MyComponent, {
    props: {
      message: '测试消息'
    }
  })

  expect(wrapper.text()).toContain('测试消息')
})
```

### E2E 测试
- 使用 Cypress 或 Playwright 进行端到端测试
- 重点测试关键用户流程和业务逻辑
- 遵循页面对象模式组织测试代码

## 调试和日志规范

### 调试工具
- 总是使用 Vue Devtools 调试组件树和状态
- 配置环境变量控制不同环境下的调试信息
- 开发环境启用源码映射以便调试

### 日志输出
- 总是使用日志级别（debug、info、warn、error）区分不同重要性的日志
- 生产环境中移除或禁用 debug 级别日志
- 错误日志包含足够的上下文信息便于排查

```typescript
// 日志使用示例
const logger = useLogger('component-name')

function handleAction() {
  try {
    // 执行操作
    logger.info('操作成功完成', { id: 123 })
  } catch (err) {
    logger.error('操作失败', { error: err, context: { id: 123 } })
  }
}
```
