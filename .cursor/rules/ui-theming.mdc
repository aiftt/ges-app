---
description:
globs:
alwaysApply: true
---
# UI组件主题规范

## 核心原则

UI组件库采用全局CSS变量实现主题样式，遵循以下核心原则：

1. **中心化主题定义**：所有主题相关的颜色、尺寸、间距等变量统一在`assets/scss/theme-variables.scss`中定义
2. **组件使用变量**：所有UI组件必须使用CSS变量而非硬编码的值
3. **多主题支持**：支持明暗主题切换，以及自定义主题
4. **一致性体验**：确保所有组件在不同主题下表现一致

## 主题变量结构

主题变量采用层次化结构：

```scss
:root {
  // 基础变量 - 颜色
  --ui-color-primary: #10b981;
  --ui-color-success: #10b981;
  --ui-color-warning: #f59e0b;
  --ui-color-danger: #ef4444;
  --ui-color-info: #3b82f6;

  // 基础变量 - 尺寸
  --ui-border-radius: 0.375rem;
  --ui-spacing: 1rem;

  // 组件特定变量
  --ui-button-radius: var(--ui-border-radius);
  --ui-card-padding: var(--ui-spacing);
}
```

## 组件实现规范

### 1. 总是使用CSS变量而非硬编码的颜色和尺寸

**错误示例：**

```css
.ui-button--primary {
  background-color: #10b981; /* 硬编码的颜色值 */
  padding: 0.5rem 1rem; /* 硬编码的尺寸 */
}
```

**正确示例：**

```css
.ui-button--primary {
  background-color: var(--ui-color-primary);
  padding: var(--ui-spacing-sm) var(--ui-spacing);
}
```

### 2. 自定义属性使用v-bind和CSS变量实现

对于需要自定义的组件属性，使用以下模式：

1. 在props中定义自定义属性
2. 创建计算属性返回CSS变量值
3. 在style中使用v-bind绑定CSS变量
4. 在CSS中使用变量并提供回退值

**示例：**

```vue
<script setup>
// 定义props
const props = defineProps({
  bgColor: String
})

// 计算CSS变量
const bgColorVar = computed(() => props.bgColor || null)
</script>

<style scoped>
.ui-component {
  --ui-component-bg-color: v-bind(bgColorVar);
  background-color: var(--ui-component-bg-color, var(--ui-color-bg));
}
</style>
```

### 3. 深色模式适配

深色模式通过`:root.dark`选择器应用，组件应尽量复用全局CSS变量，避免在组件内部重新定义深色模式的颜色。

**不推荐：**

```css
.ui-component {
  background-color: white;
}

:root.dark .ui-component {
  background-color: #1f2937;
}
```

**推荐：**

```css
.ui-component {
  background-color: var(--ui-color-bg);
}
/* 无需重新定义深色模式，因为CSS变量会自动适配 */
```

### 4. 悬停和交互状态处理

对于悬停、点击等交互状态，推荐使用亮度或透明度调整而非硬编码颜色：

```css
.ui-button:hover {
  /* 使用滤镜调整亮度，而非指定另一个颜色值 */
  filter: brightness(0.9);
}
```

## 变量命名规范

1. **前缀**：所有变量使用`--ui-`前缀
2. **分类**：按功能分类，如颜色(`--ui-color-`)、尺寸(`--ui-spacing-`)等
3. **组件特定变量**：以组件名作为前缀，如`--ui-button-radius`
4. **变量层级**：基础变量 > 功能变量 > 组件特定变量

## 示例代码

### 完整的组件示例

```vue
<script setup lang="ts" name="UiButton">
// 定义props
const props = withDefaults(defineProps<{
  type?: 'default' | 'primary' | 'success' | 'warning' | 'danger'
  size?: 'small' | 'default' | 'large'
  bgColor?: string
  textColor?: string
}>(), {
  type: 'default',
  size: 'default'
})

// CSS变量计算
const bgColorVar = computed(() => props.bgColor || null)
const textColorVar = computed(() => props.textColor || null)
</script>

<template>
  <button :class="['ui-button', `ui-button--${type}`, `ui-button--${size}`]">
    <slot />
  </button>
</template>

<style scoped>
.ui-button {
  /* 自定义变量绑定 */
  --ui-button-bg-color: v-bind(bgColorVar);
  --ui-button-text-color: v-bind(textColorVar);

  /* 使用变量 */
  background-color: var(--ui-button-bg-color, var(--ui-color-secondary-light));
  color: var(--ui-button-text-color, var(--ui-color-text));
  border-radius: var(--ui-button-radius, var(--ui-border-radius));
  padding: var(--ui-button-padding-y, var(--ui-spacing-sm))
           var(--ui-button-padding-x, var(--ui-spacing));
  font-size: var(--ui-font-size);
  transition: all var(--ui-transition);
}

.ui-button--primary {
  background-color: var(--ui-color-primary);
  color: white;
}

.ui-button--small {
  font-size: var(--ui-font-size-sm);
  padding: var(--ui-spacing-xs) var(--ui-spacing-sm);
}
</style>
```

## 主题切换实现

主题切换通过给`:root`元素添加或移除`.dark`类实现：

```js
// 切换深色模式
function toggleDarkMode(isDark) {
  if (isDark) {
    document.documentElement.classList.add('dark')
  } else {
    document.documentElement.classList.remove('dark')
  }
}
```

## 自定义主题实现

通过动态修改CSS变量实现自定义主题：

```js
// 设置自定义主题
function setCustomTheme(theme) {
  const root = document.documentElement

  // 设置主色调
  root.style.setProperty('--ui-color-primary', theme.primary || '')
  root.style.setProperty('--ui-color-success', theme.success || '')
  // 设置其他变量...
}
```

## 演示示例

下面的示例展示了一个使用CSS变量的按钮组件：

```vue
<template>
  <!-- 默认按钮 -->
  <ui-button>默认按钮</ui-button>

  <!-- 主要按钮 -->
  <ui-button type="primary">主要按钮</ui-button>

  <!-- 成功按钮 -->
  <ui-button type="success">成功按钮</ui-button>

  <!-- 自定义颜色按钮 -->
  <ui-button bg-color="#8B5CF6" text-color="white">自定义紫色按钮</ui-button>
</template>
```
