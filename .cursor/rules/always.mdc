---
description:
globs:
alwaysApply: true
---

这里描述一些严格禁止和总是干什么的的行为，请务必遵守

# 总是要遵守的规范

- 总是直接修改代码而不是提供代码让我来手动应用
- 总是以中文回答我的问题
- 总是使用成熟的工具库，比如：`@vueuse/core`, `lodash` 等等，而不是自己手动实现
- 总是避免重复造轮子，总是遵循复用原则
- 总是在vue组件上应用值为 `true` 的布尔值的时候总是简写，如：正确写法：`<comp route />`，错误写法：`<comp :route="true"/>`
- 总是优先使用 `@nuxt/icon` 来使用图标
- 总是使用 `unocss classname + css variable` 方式实现 ui 组件和页面的样式，禁止使用 style 内联方式
- 总是使用封装后的 logger 来打印客户端和服务端日志，如果没有就实现它，封装它
- 总是使用 import.meta 下的属性来判断是客户端还是服务端
- 总是遵循目录创建规范，禁止使用 CamelCase.vue组件命名，应该遵循 `camel/case.vue` 规范，具体参考 ui 组件规范
- 总是在提供完代码最后执行 `pnpm lint` 检查代码并修复错误
- 总是在书写组件demo代码时同步提供示例代码
- 总是删除未使用到的会触发 eslint `unused-imports/no-unused-vars` 的代码
- 总是尽可能的使用 vue 特性，结合 `v-bind + css variable` 来实现动态样式，如：`--ui-primary-color:v-bind(color)`

# 必须禁止的规范

- 禁止显示调用 `console.<api>` 来输出打印，必须使用 `utils/logger` 下封装的打印，注意客户端和服务端的区别和使用
- 禁止使用 `typeof window` 来判断是客户端还是服务端，使用 `import.meta`
- 禁止出现 `camel-case.vue` 组件命名风格，正确示范：`camel/case.vue`
- 禁止出现 `CamelCase.vue` 组件命名风格，正确示范：`camel/case.vue`
- 禁止直接使用 style 内联样式除非迫不得已其他方式没法实现的情况下才用
- 禁止添加或保留未使用的代码，变量等，不需要的东西直接删除
