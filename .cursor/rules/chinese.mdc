---
description:
globs:
alwaysApply: true
---
# 中国特色开发规范

本文档规定了适合中国市场和用户习惯的开发规范，包括本地化、国际化、用户体验设计、技术选型等方面的考量，旨在确保项目能够更好地服务中国用户。

## 本地化与国际化

### 语言与文字

- 支持中英双语注释，便于国内外开发者协作
- 面向中国用户的界面默认使用简体中文
- 关键业务术语保持中英文对照，便于理解
- 错误提示和操作引导使用中文表述，符合用户阅读习惯
- 支持完整的简繁体切换机制

### 日期与时间

- 使用符合中国标准的日期格式：`YYYY年MM月DD日`或`YYYY-MM-DD`
- 时间表示遵循24小时制：`HH:mm:ss`
- 日期选择器默认支持农历显示
- 重要节假日(春节、国庆等)在日历组件中特殊标记

### 数字与货币

- 货币符号默认使用人民币符号(¥)
- 大数字采用中国习惯分节方式(万、亿)
- 数字格式化支持中文大写金额转换(如：壹佰贰拾叁元肆角伍分)
- 支持中国各类支付方式的图标和流程

## 界面设计与用户体验

### 排版与布局

- 考虑中文字符排版特点，设置合理的行高和字间距
- 按钮和表单元素尺寸符合中国用户触控习惯(通常略大)
- 表单验证提示位置符合中国用户阅读习惯(一般在输入框右侧或下方)
- 对话框和弹窗的确认/取消按钮位置符合本地习惯(确认在右)

### 色彩与视觉

- 主题色彩考虑中国传统色彩心理学
- 重要节日自动应用符合节日氛围的主题(如春节红色主题)
- 成功/警告/错误等状态的颜色符合中国用户认知习惯
- 图标设计符合中国用户的文化理解和视觉习惯

### 交互模式

- 表单提交后显示明确的成功/失败反馈
- 长列表默认提供"返回顶部"功能
- 复杂操作提供步骤引导和操作提示
- 移动端支持常见的手势操作和反馈
- 重要操作提供二次确认机制

## 功能与服务适配

### 账号与安全

- 支持手机号码作为主要账号标识
- 登录支持短信验证码、扫码等多种方式
- 实名认证流程符合国内监管要求
- 密码规则满足国内安全合规要求
- 敏感操作支持人脸识别等生物认证

### 地址与区域

- 省市区三级联动选择器
- 支持统一社会信用代码验证
- 邮编和行政区划代码自动关联
- 地图服务默认使用国内地图服务(高德、百度等)
- 坐标系统使用GCJ-02坐标系

### 支付与电商

- 集成常用的中国支付方式(微信支付、支付宝、银联等)
- 发票信息填写和管理符合中国税务规定
- 价格展示支持"起"、"折"等中国特色价格表述
- 促销活动支持中国特色的营销模式(秒杀、拼团等)
- 订单状态流转符合中国电商习惯

## 框架与生态适配

### 技术选型与集成

- 遵循国内主流项目的最佳实践
- 集成常用的国内框架和库
- 适配国内特色的开发场景和需求
- 考虑国内网络环境，优化资源加载策略
- CDN选择国内服务商以提高访问速度

### 平台适配

- 优先兼容QQ/微信/支付宝等超级APP的WebView环境
- 小程序版本开发考虑各平台规范差异
- 移动端适配国产手机常见屏幕尺寸和系统特性
- 考虑国内Android系统定制版本的兼容性问题
- 优化在弱网和2G/3G网络下的应用表现

### 工具与环境

- 项目文档提供中文版本
- 错误日志和调试信息支持中文
- 构建与部署流程适应国内网络环境
- 服务端部署考虑国内ICP备案等合规要求
- 开发环境配置考虑国内网络限制

## 合规与监管适应

### 数据隐私与安全

- 用户协议和隐私政策符合中国法律法规
- 敏感数据处理符合国内个人信息保护法规定
- 实现必要的数据脱敏和访问控制
- 日志记录符合等级保护要求
- 支持用户数据导出和删除功能

### 内容与审核

- 实现内容安全审核机制
- 用户生成内容(UGC)管理符合监管要求
- 敏感词过滤支持中文语境下的智能识别
- 内容举报机制符合行业规范
- 实时通讯功能满足监管要求

### 行业特定规范

- 金融类应用满足央行和银保监会相关规定
- 医疗健康类应用符合卫健委相关规范
- 教育类应用遵循教育部相关要求
- 电商类应用满足市场监管总局规定
- 内容类应用符合网信办相关管理规范

## 性能优化

### 加载与响应

- 针对国内网络环境优化首屏加载时间
- 实现资源预加载和懒加载策略
- 针对中国用户的使用高峰期进行性能调优
- 移动端页面过渡效果符合用户期望
- 使用骨架屏减少等待感知

### 本地化优化

- 字体文件按中文常用字进行分包
- 图片和多媒体资源使用国内CDN
- 数据接口考虑国内网络延迟，实现合理的缓存策略
- 优化中文搜索和过滤的性能
- 考虑双语环境下的动态布局调整

## 开发流程适应

### 沟通与协作

- 技术文档支持中英双语
- 代码评审标准考虑中文注释的规范性
- 团队协作工具选择适合国内团队的平台
- 需求和缺陷管理支持中文描述
- 支持远程协作的工作模式

### 测试与质量

- 测试数据集包含中文场景的测试用例
- 兼容性测试覆盖国内主流浏览器和设备
- 性能测试模拟国内典型网络环境
- 安全测试符合国内等级保护要求
- 用户体验测试考虑中国用户的使用习惯

## 实现示例

### 电话号码输入组件

```vue
<script setup lang="ts" name="UiPhoneInput">
/**
 * 中国手机号码输入组件
 * 创建日期: {date}
 * 作者: aiftt
 * 更新日期: {date} - 添加号码段验证
 */

import { ref, computed } from 'vue'

// 定义props
const props = withDefaults(defineProps<{
  /**
   * 手机号码值
   */
  modelValue?: string
  /**
   * 是否禁用
   */
  disabled?: boolean
  /**
   * 占位文本
   */
  placeholder?: string
}>(), {
  modelValue: '',
  disabled: false,
  placeholder: '请输入11位手机号码'
})

// 定义事件
const emit = defineEmits<{
  (e: 'update:modelValue', value: string): void
  (e: 'valid', isValid: boolean): void
}>()

// 手机号码正则验证
const phoneRegex = /^1[3-9]\d{9}$/

// 验证手机号码有效性
const isValid = computed(() => {
  if (!props.modelValue) return false
  return phoneRegex.test(props.modelValue)
})

// 监听输入
const handleInput = (e: Event) => {
  const target = e.target as HTMLInputElement
  let value = target.value

  // 仅保留数字
  value = value.replace(/\D/g, '')

  // 限制长度为11位
  if (value.length > 11) {
    value = value.slice(0, 11)
  }

  // 提交更新
  emit('update:modelValue', value)
  emit('valid', phoneRegex.test(value))
}

// 格式化显示（3-4-4格式）
const formattedValue = computed(() => {
  const phone = props.modelValue
  if (!phone) return ''

  if (phone.length > 7) {
    return `${phone.slice(0, 3)} ${phone.slice(3, 7)} ${phone.slice(7)}`
  } else if (phone.length > 3) {
    return `${phone.slice(0, 3)} ${phone.slice(3)}`
  }

  return phone
})
</script>

<template>
  <div class="ui-phone-input">
    <input
      type="tel"
      :value="formattedValue"
      :disabled="disabled"
      :placeholder="placeholder"
      class="ui-phone-input__field"
      :class="{ 'ui-phone-input__field--valid': isValid }"
      @input="handleInput"
    />
    <span v-if="modelValue && !isValid" class="ui-phone-input__error">
      请输入有效的11位手机号码
    </span>
  </div>
</template>

<style scoped>
.ui-phone-input {
  position: relative;
}

.ui-phone-input__field {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid var(--ui-border-color, #d1d5db);
  border-radius: 4px;
  font-size: 16px;
  transition: all 0.3s;
}

.ui-phone-input__field:focus {
  border-color: var(--ui-color-primary, #10b981);
  outline: none;
  box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2);
}

.ui-phone-input__field--valid {
  border-color: var(--ui-color-success, #10b981);
}

.ui-phone-input__error {
  display: block;
  color: var(--ui-color-danger, #ef4444);
  font-size: 12px;
  margin-top: 4px;
}
</style>
```

### 中国地址选择器

```vue
<script setup lang="ts" name="UiAddressPicker">
/**
 * 中国地址选择器组件
 * 创建日期: {date}
 * 作者: aiftt
 * 更新日期: {date} - 添加县区级选择
 */

import { ref, reactive, watch } from 'vue'

// 定义省市区数据结构
interface IRegion {
  code: string
  name: string
  children?: IRegion[]
}

// 定义地址数据结构
interface IAddress {
  province?: string
  city?: string
  district?: string
  provinceCode?: string
  cityCode?: string
  districtCode?: string
}

// 定义props
const props = withDefaults(defineProps<{
  /**
   * 地址值
   */
  modelValue?: IAddress
}>(), {
  modelValue: () => ({})
})

// 定义事件
const emit = defineEmits<{
  (e: 'update:modelValue', value: IAddress): void
  (e: 'change', value: IAddress): void
}>()

// 数据状态
const selectedAddress = reactive<IAddress>({
  province: props.modelValue?.province || '',
  city: props.modelValue?.city || '',
  district: props.modelValue?.district || '',
  provinceCode: props.modelValue?.provinceCode || '',
  cityCode: props.modelValue?.cityCode || '',
  districtCode: props.modelValue?.districtCode || ''
})

// 级联选择处理
const handleProvinceChange = (event: Event) => {
  const select = event.target as HTMLSelectElement
  const code = select.value
  const name = select.options[select.selectedIndex].text

  selectedAddress.province = name
  selectedAddress.provinceCode = code
  selectedAddress.city = ''
  selectedAddress.cityCode = ''
  selectedAddress.district = ''
  selectedAddress.districtCode = ''

  updateModelValue()
}

const handleCityChange = (event: Event) => {
  const select = event.target as HTMLSelectElement
  const code = select.value
  const name = select.options[select.selectedIndex].text

  selectedAddress.city = name
  selectedAddress.cityCode = code
  selectedAddress.district = ''
  selectedAddress.districtCode = ''

  updateModelValue()
}

const handleDistrictChange = (event: Event) => {
  const select = event.target as HTMLSelectElement
  const code = select.value
  const name = select.options[select.selectedIndex].text

  selectedAddress.district = name
  selectedAddress.districtCode = code

  updateModelValue()
}

// 更新v-model值
const updateModelValue = () => {
  emit('update:modelValue', { ...selectedAddress })
  emit('change', { ...selectedAddress })
}

// 监听props变化
watch(() => props.modelValue, (newValue) => {
  if (newValue) {
    selectedAddress.province = newValue.province || ''
    selectedAddress.city = newValue.city || ''
    selectedAddress.district = newValue.district || ''
    selectedAddress.provinceCode = newValue.provinceCode || ''
    selectedAddress.cityCode = newValue.cityCode || ''
    selectedAddress.districtCode = newValue.districtCode || ''
  }
}, { deep: true })
</script>

<template>
  <div class="ui-address-picker">
    <div class="ui-address-picker__selects">
      <select
        class="ui-address-picker__select"
        :value="selectedAddress.provinceCode"
        @change="handleProvinceChange"
      >
        <option value="">请选择省份</option>
        <!-- 这里会动态生成省份选项 -->
      </select>

      <select
        class="ui-address-picker__select"
        :value="selectedAddress.cityCode"
        :disabled="!selectedAddress.provinceCode"
        @change="handleCityChange"
      >
        <option value="">请选择城市</option>
        <!-- 这里会动态生成城市选项 -->
      </select>

      <select
        class="ui-address-picker__select"
        :value="selectedAddress.districtCode"
        :disabled="!selectedAddress.cityCode"
        @change="handleDistrictChange"
      >
        <option value="">请选择区县</option>
        <!-- 这里会动态生成区县选项 -->
      </select>
    </div>

    <div v-if="selectedAddress.province" class="ui-address-picker__preview">
      当前选择: {{ selectedAddress.province }} {{ selectedAddress.city }} {{ selectedAddress.district }}
    </div>
  </div>
</template>

<style scoped>
.ui-address-picker {
  width: 100%;
}

.ui-address-picker__selects {
  display: flex;
  gap: 8px;
}

.ui-address-picker__select {
  flex: 1;
  padding: 8px 12px;
  border: 1px solid var(--ui-border-color, #d1d5db);
  border-radius: 4px;
  font-size: 14px;
  background-color: white;
}

.ui-address-picker__select:disabled {
  background-color: #f3f4f6;
  cursor: not-allowed;
}

.ui-address-picker__preview {
  margin-top: 8px;
  font-size: 14px;
  color: var(--ui-color-text-secondary, #6b7280);
}
</style>
```

## 常见问题与解决方案

### 1. 中文字体渲染问题

**问题**：中文字体文件大小通常很大，影响页面加载性能

**解决方案**：
- 使用字体子集化技术，只包含常用汉字
- 使用系统默认中文字体，避免额外加载
- 采用CDN加速字体文件加载
- 实现字体的WOFF2格式压缩和预加载

### 2. 中文输入法兼容性问题

**问题**：中文输入法输入过程中可能触发不必要的事件

**解决方案**：
- 监听compositionstart/compositionend事件，在中文输入过程中阻止相关处理
- 表单验证在输入完成后进行，而非实时验证
- 搜索建议在输入法确认后触发，而非每次keyup

### 3. 移动设备适配问题

**问题**：国内安卓设备碎片化严重，iOS与安卓环境差异大

**解决方案**：
- 使用响应式设计，避免固定尺寸
- 针对高流量机型单独测试和优化
- 使用特性检测而非设备检测
- 针对关键场景进行设备测试
